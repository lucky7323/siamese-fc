% -------------------------------------------------------------------------------------------------
function bboxes = tracker_pre(targetPosition, targetSize, startImgFile, scale, p)
          
%TRACKER
%   is the main function that performs the tracking loop
%   Default parameters are overwritten by VARARGIN
%
%   Luca Bertinetto, Jack Valmadre, Joao F. Henriques, 2016
% -------------------------------------------------------------------------------------------------
    % These are the default hyper-params for SiamFC-3S
    % The ones for SiamFC (5 scales) are in params-5s.txt
    im = imresize(startImgFile{1},scale);
    im = gpuArray(im);
 %   im = imresize(im,bboxes[600,800]);
    % if grayscale repeat one channel to match filters size
	if(size(im, 3)==1)
        im = repmat(im, [1 1 3]);
    end
    % Init visualization
    
    % get avg for padding
    avgChans = gather([mean(mean(im(:,:,1))) mean(mean(im(:,:,2))) mean(mean(im(:,:,3)))]);

    wc_z = targetSize(:,2) + p.contextAmount*sum(targetSize,2); %numDet
    hc_z = targetSize(:,1) + p.contextAmount*sum(targetSize,2); %numDet 
    s_z = sqrt(wc_z.*hc_z);  %numDet
    scale_z = p.exemplarSize ./ s_z;  %numDet
    % initialize the exemplar
    
    numDet = length(wc_z);  %numDet
    z_crop = zeros(p.exemplarSize,p.exemplarSize,3,numDet,'single');
    z_crop = gpuArray(z_crop);
    for k=1:numDet
        [z_crop(:,:,:,k), ~] = get_subwindow_tracking(im, targetPosition(k,:), [p.exemplarSize p.exemplarSize], [round(s_z(k,:)) round(s_z(k,:))], avgChans);
    end
%    if p.subMean
%        z_crop = bsxfun(@minus, z_crop, reshape(stats.z.rgbMean, [1 1 3]));
%    end
    d_search = (p.instanceSize - p.exemplarSize)/2;
    pad = d_search./scale_z; %numDet
    s_x = s_z + 2*pad; %numDet
    % arbitrary scale saturation
    min_s_x = 0.2*s_x; %numDet
    max_s_x = 5*s_x; %numDet

    switch p.windowing
        case 'cosine'
            window = single(hann(p.scoreSize*p.responseUp) * hann(p.scoreSize*p.responseUp)');
        case 'uniform'
            window = single(ones(p.scoreSize*p.responseUp, p.scoreSize*p.responseUp));
    end
    % make the window sum 1
    window = window / sum(window(:));
    scales = (p.scaleStep .^ ((ceil(p.numScale/2)-p.numScale) : floor(p.numScale/2)));
    % evaluate the offline-trained network for exemplar z features
    
    for k=1:numDet
        net_z.eval({'exemplar', z_crop(:,:,:,k)});
        z_features_temp = net_z.vars(zFeatId).value;
        z_features(:,:,:,:,k) = repmat(z_features_temp, [1 1 1 p.numScale]);    %numDet
    end
    
end
